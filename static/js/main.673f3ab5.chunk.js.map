{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","date","Date","month","Array","nameOfMonth","getMonth","displayTodaysDate","getDate","getFullYear","useState","switchToggled","setSwitchToggled","switchToggled2","setSwitchToggled2","switchToggled3","setSwitchToggled3","className","onClick","console","log","alert","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gPAkFeA,MA/Ef,WAGE,IAAMC,EAAO,IAAIC,KACXC,EAAQ,IAAIC,MAClBD,EAAM,GAAK,SACXA,EAAM,GAAK,UACXA,EAAM,GAAK,UACXA,EAAM,GAAK,QACXA,EAAM,GAAK,MACXA,EAAM,GAAK,OACXA,EAAM,GAAK,OACXA,EAAM,GAAK,SACXA,EAAM,GAAK,YACXA,EAAM,GAAK,UACXA,EAAM,IAAM,WACZA,EAAM,IAAM,WACZ,IAAIE,EAAcF,EAAMF,EAAKK,YACvBC,EAAoBN,EAAKO,UAAY,KAAOH,EAAc,IAAMJ,EAAKQ,cAQ3E,EAA0CC,oBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAOA,EAA4CF,oBAAS,GAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KAOA,EAA4CJ,oBAAS,GAArD,mBAAOK,EAAP,KAAuBC,EAAvB,KAeA,OACE,gCACE,oBAAIC,UAAU,QAAd,sBACA,sDAEA,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,4BAAIV,MAGN,sBAAKU,UAAU,gBAAf,UAEE,wBAAQA,UAAWN,EAAgB,cAAgB,GAAIO,QAxC1C,WACHN,GAAhBD,GACAQ,QAAQC,IAAIT,GACZU,MAAM,qCAqCA,gBAGA,wBAAQJ,UAAWJ,EAAiB,cAAgB,GAAIK,QApC1C,WACHJ,GAAjBD,GACAM,QAAQC,IAAIP,GACZQ,MAAM,qCAiCA,gBAEA,wBAAQJ,UAAWF,EAAiB,cAAgB,GAAIG,QA/B1C,WACHF,GAAjBD,GACAI,QAAQC,IAAIL,GACZM,MAAM,oCA4BA,0BC/DUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN5B,QAAQ4B,MAAMA,EAAMC,YE/G5BrB,K","file":"static/js/main.673f3ab5.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n  //DATE\r\n  const date = new Date();\r\n  const month = new Array();\r\n  month[0] = \"Januar\";\r\n  month[1] = \"Februar\";\r\n  month[2] = \"MÃ¤rz\";\r\n  month[3] = \"April\";\r\n  month[4] = \"Mai\";\r\n  month[5] = \"Juni\";\r\n  month[6] = \"Juli\";\r\n  month[7] = \"August\";\r\n  month[8] = \"September\";\r\n  month[9] = \"Oktober\";\r\n  month[10] = \"November\";\r\n  month[11] = \"Dezember\";\r\n  let nameOfMonth = month[date.getMonth()];\r\n  const displayTodaysDate = date.getDate() + '. ' + nameOfMonth + ' ' + date.getFullYear();\r\n\r\n  // BUTTONS\r\n  // const btn = document.querySelector('.btn-morning');\r\n  // const changeColor = document.querySelector(\".changeColor\");\r\n  // changeColor.addEventListener('click', function () {\r\n  //   btn.classList.toggle(\"change\");\r\n  // });\r\n  const [switchToggled, setSwitchToggled] = useState(false);\r\n  const toggleSwitch = () => {\r\n    switchToggled ? setSwitchToggled(false) : setSwitchToggled(true);\r\n    console.log(switchToggled);\r\n    alert('Tablette morgens ist eingeworfen');\r\n  };\r\n\r\n  const [switchToggled2, setSwitchToggled2] = useState(false);\r\n  const toggleSwitch2 = () => {\r\n    switchToggled2 ? setSwitchToggled2(false) : setSwitchToggled2(true);\r\n    console.log(switchToggled2);\r\n    alert('Tablette mittags ist eingeworfen');\r\n  };\r\n\r\n  const [switchToggled3, setSwitchToggled3] = useState(false);\r\n  const toggleSwitch3 = () => {\r\n    switchToggled3 ? setSwitchToggled3(false) : setSwitchToggled3(true);\r\n    console.log(switchToggled3);\r\n    alert('Tablette abends ist eingeworfen');\r\n  };\r\n\r\n  // const clickHandlerMo = () => {\r\n  //   console.log('clicked mittags');\r\n  //   alert('clicked morgens');\r\n  // };\r\n\r\n  // const [toggle, setToggle] = useState(true);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"title\">Medi App</h1>\r\n      <p>(no data storage yet)</p>\r\n\r\n      <div className=\"container\">\r\n        <div className=\"date-container\">\r\n          <p>{displayTodaysDate}</p>\r\n        </div>\r\n\r\n        <div className=\"btn-container\">\r\n          {/* <button onClick={clickHandlerMo}>mo</button> */}\r\n          <button className={switchToggled ? \"changeColor\" : \"\"} onClick={toggleSwitch}>mo</button>\r\n          {/* <button onClick={() => setToggle(!toggle)}>mo</button> */}\r\n          {/* <button onClick={clickHandlerMi}>mi</button> */}\r\n          <button className={switchToggled2 ? \"changeColor\" : \"\"} onClick={toggleSwitch2}>mi</button>\r\n          {/* <button onClick={clickHandlerAb}>ab</button> */}\r\n          <button className={switchToggled3 ? \"changeColor\" : \"\"} onClick={toggleSwitch3}>ab</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}