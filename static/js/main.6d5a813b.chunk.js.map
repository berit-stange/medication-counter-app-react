{"version":3,"sources":["pages/Login.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Login","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","loading","userData","email","state","password","axios","post","then","response","localStorage","setItem","data","token","history","push","catch","error","errors","nextProps","UI","this","classes","Container","component","maxWidth","CssBaseline","className","paper","Typography","variant","form","noValidate","TextField","margin","required","fullWidth","id","label","autoComplete","autoFocus","helperText","onChange","type","Button","color","submit","onClick","disabled","CircularProgress","size","progess","Grid","container","item","Link","href","general","customError","Component","withStyles","theme","marginTop","spacing","display","flexDirection","alignItems","width","fontSize","position","App","exact","path","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.6d5a813b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Component } from 'react';\r\n\r\n// Material UI components\r\n// import Avatar from '@material-ui/core/Avatar';\r\n// import LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport Container from '@material-ui/core/Container';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport axios from 'axios';\r\n\r\n\r\nconst styles = (theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    customError: {\r\n        color: 'red',\r\n        fontSize: '0.8rem',\r\n        marginTop: 10\r\n    },\r\n    progess: {\r\n        position: 'absolute'\r\n    }\r\n});\r\n\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            errors: [],\r\n            loading: false\r\n        };\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.UI.errors) {\r\n            this.setState({\r\n                errors: nextProps.UI.errors\r\n            });\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        const userData = {\r\n            email: this.state.email,\r\n            password: this.state.password\r\n        };\r\n        axios\r\n            .post('/login', userData)\r\n            .then((response) => {\r\n                localStorage.setItem('AuthToken', `Bearer ${response.data.token}`);\r\n                this.setState({\r\n                    loading: false,\r\n                });\r\n                this.props.history.push('/');\r\n            })\r\n            .catch((error) => {\r\n                this.setState({\r\n                    errors: error.response.data,\r\n                    loading: false\r\n                });\r\n            });\r\n    };\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const { errors, loading } = this.state;\r\n        return (\r\n\r\n\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <h1>Login.js</h1>\r\n\r\n                <CssBaseline />\r\n\r\n                <div className={classes.paper}>\r\n                    {/* <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon />\r\n                    </Avatar> */}\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Login\r\n                    </Typography>\r\n                    <form className={classes.form} noValidate>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            label=\"Email Address\"\r\n                            name=\"email\"\r\n                            autoComplete=\"email\"\r\n                            autoFocus\r\n                            helperText={errors.email}\r\n                            error={errors.email ? true : false}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            helperText={errors.password}\r\n                            error={errors.password ? true : false}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            onClick={this.handleSubmit}\r\n                            disabled={loading || !this.state.email || !this.state.password}\r\n                        >\r\n                            Sign In\r\n                            {loading && <CircularProgress size={30} className={classes.progess} />}\r\n                        </Button>\r\n                        <Grid container>\r\n                            <Grid item>\r\n                                <Link href=\"signup\" variant=\"body2\">\r\n                                    {\"Don't have an account? Sign Up\"}\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                        {errors.general && (\r\n                            <Typography variant=\"body2\" className={classes.customError}>\r\n                                {errors.general}\r\n                            </Typography>\r\n                        )}\r\n                    </form>\r\n                </div>\r\n            </Container>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Login);","import React from 'react';\r\n// import { useState } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Login from './pages/Login';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div>\r\n      <h1>App.js</h1>\r\n      <Router>\r\n        <div>\r\n          <Switch>\r\n            <Route exact path=\"/login\" component={Login} />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}